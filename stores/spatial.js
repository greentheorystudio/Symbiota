const useSpatialStore = Pinia.defineStore('spatial', {
    state: () => ({
        coreLayers: ['base','uncertainty','select','pointv','heat','spider','radius','vector'],
        mapSettings: {
            activeLayer: 'none',
            blankDragDropSource: null,
            clusterDistance: clusterDistance,
            clusterPoints: true,
            clusterSource: null,
            defaultSymbology: 'InventoryLevel',
            distFromMeLat: null,
            distFromMeLong: null,
            dragDrop1: false,
            dragDrop2: false,
            dragDrop3: false,
            dragDrop4: false,
            dragDrop5: false,
            dragDrop6: false,
            dragDropBorderColor: dragDropBorderColor,
            dragDropBorderWidth: dragDropBorderWidth,
            dragDropFillColor: dragDropFillColor,
            dragDropOpacity: dragDropOpacity,
            dragDropPointRadius: dragDropPointRadius,
            dragDropRasterColorScale: dragDropRasterColorScale,
            dragDropTarget: '',
            draw: null,
            drawToolFreehandMode: false,
            featureCount: 0,
            findSpringRadiusKm: 0,
            heatMapBlur: heatMapBlur,
            heatMapRadius: heatMapRadius,
            initialMapCenter: initialMapCenter,
            initialMapZoom: initialMapZoom,
            inputPointUncertainty: 0,
            layerQuerySelectorId: null,
            loadPointsError: false,
            loadPointsEvent: false,
            mapSymbology: 'InventoryLevel',
            nearbySpringSource: null,
            pointActive: false,
            pointLayerBorderColor: pointLayerBorderColor,
            pointLayerBorderWidth: pointLayerBorderWidth,
            pointLayerFillColor: pointLayerFillColor,
            pointLayerPointRadius: pointLayerPointRadius,
            pointLayerSelectionsBorderColor: pointLayerSelectionsBorderColor,
            pointLayerSelectionsBorderWidth: pointLayerSelectionsBorderWidth,
            pointVectorSource: null,
            polyArea: 0,
            polyCount: 0,
            radiusCircleSource: null,
            rasterAnalysisSource: null,
            recordInfoWindowId: null,
            returnClusters: false,
            selectedBaseLayer: SELECTEDBASELAYER,
            selectedDrawTool: 'None',
            selectedFeatures: null,
            selectedPointFeatures: null,
            selectedRecordsSelectionsSymbologyTab: 'records',
            selectedTargetRaster: 'none',
            selectSource: null,
            shapeActive: false,
            shapesBorderColor: shapesBorderColor,
            shapesBorderWidth: shapesBorderWidth,
            shapesFillColor: shapesFillColor,
            shapesOpacity: shapesOpacity,
            shapesPointRadius: shapesPointRadius,
            shapesSelectionsBorderColor: shapesSelectionsBorderColor,
            shapesSelectionsBorderWidth: shapesSelectionsBorderWidth,
            shapesSelectionsFillColor: shapesSelectionsFillColor,
            shapesSelectionsOpacity: shapesSelectionsOpacity,
            showControlPanelLeft: false,
            showControlPanelTop: true,
            showHeatMap: showHeatMap,
            showInfoWindow: false,
            showLayerController: false,
            showLayerQuerySelector: false,
            showMapSettings: false,
            showRecordInfoWindow: false,
            showSidePanel: false,
            sidePanelExpandedElement: 'criteria',
            submitButtonDisabled: true,
            submitButtonText: '',
            toggleSelectedPoints: false,
            uncertaintyCircleSource: null,
            uncertaintyRadiusText: '',
            uncertaintyRadiusValue: 0,
            vectorSource: null
        },
        rasterColorScales: [
            {value: 'autumn', label: 'Autumn'},
            {value: 'blackbody', label: 'Blackbody'},
            {value: 'bluered', label: 'Bluered'},
            {value: 'bone', label: 'Bone'},
            {value: 'cool', label: 'Cool'},
            {value: 'copper', label: 'Copper'},
            {value: 'earth', label: 'Earth'},
            {value: 'electric', label: 'Electric'},
            {value: 'greens', label: 'Greens'},
            {value: 'greys', label: 'Greys'},
            {value: 'hot', label: 'Hot'},
            {value: 'hsv', label: 'Hsv'},
            {value: 'inferno', label: 'Inferno'},
            {value: 'jet', label: 'Jet'},
            {value: 'magma', label: 'Magma'},
            {value: 'picnic', label: 'Picnic'},
            {value: 'plasma', label: 'Plasma'},
            {value: 'portland', label: 'Portland'},
            {value: 'rainbow', label: 'Rainbow'},
            {value: 'rdbu', label: 'Rdbu'},
            {value: 'spring', label: 'Spring'},
            {value: 'summer', label: 'Summer'},
            {value: 'turbo', label: 'Turbo'},
            {value: 'viridis', label: 'Viridis'},
            {value: 'winter', label: 'Winter'},
            {value: 'ylgnbu', label: 'Ylgnbu'},
            {value: 'ylorrd', label: 'Ylorrd'}
        ],
        symbologyOptions: [
            {field: 'InventoryLevel', label: 'Inventory Level'},
            {field: 'SurveyStatus', label: 'Survey Status'},
            {field: 'SpringType1', label: 'Spring Type'},
            {field: 'LandUnit', label: 'Land Unit'},
            {field: 'LandUnitDetail', label: 'Land Unit Detail'},
            {field: 'HUC', label: 'HUC'},
            {field: 'infoSource', label: 'Information Source'},
            {field: 'initialtimestamp', label: 'Year Recorded'}
        ]
    }),
    getters: {
        getCoreLayers(state) {
            return state.coreLayers;
        },
        getMapSettings(state) {
            return state.mapSettings;
        },
        getRasterColorScales(state) {
            return state.rasterColorScales;
        },
        getSymbologyOptions(state) {
            return state.symbologyOptions;
        }
    }
});
